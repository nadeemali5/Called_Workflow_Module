name: .NET 6 Build, Restore, and Run

on:
  workflow_call:
    inputs:
      branch_or_tag:
        description: 'The branch or tag to build'
        required: true
        type: string
      publishWebProjects:
        required: true
        type: string
      projects:
        required: true
        type: string
      custom:
        required: true
        type: string
      arguments:
        required: true
        type: string
      publishTestResults:
        required: true
        type: string
      testRunTitle:
        required: true
        type: string
      zipAfterPublish:
        required: true
        type: string
      modifyOutputPath:
        required: true
        type: string
      selectOrConfig:
        required: true
        type: string
      feedRestore:
        required: true
        type: string
      includeNuGetOrg:
        required: true
        type: string
      nugetConfigPath:
        required: true
        type: string
      externalEndpoints:
        required: true
        type: string
      noCache:
        required: true
        type: string
      packagesDirectory:
        required: true
        type: string
      verbosityRestore:
        required: true
        type: string
      searchPatternPush:
        required: true
        type: string
      nuGetFeedType:
        required: true
        type: string
      feedPublish:
        required: true
        type: string
      publishPackageMetadata:
        required: true
        type: string
      externalEndpoint:
        required: true
        type: string
      searchPatternPack:
        required: true
        type: string
      configurationToPack:
        required: true
        type: string
      outputDir:
        required: true
        type: string
      nobuild:
        required: true
        type: string
      includesymbols:
        required: true
        type: string
      includesource:
        required: true
        type: string
      versioningScheme:
        required: true
        type: string
      versionEnvVar:
        required: true
        type: string
      requestedMajorVersion:
        required: true
        type: number
      requestedMinorVersion:
        required: true
        type: number
      requestedPatchVersion:
        required: true
        type: number
      buildProperties:
        required: true
        type: string
      verbosityPack:
        required: true
        type: string
      workingDirectory:
        required: true
        type: string
      task:
        required: true
        type: string

env:
  Configuration: 'Release'  # Define Configuration variable here

jobs:
  build:
    runs-on: windows-latest    

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Ensure .NET 6 SDK is installed using actions/setup-dotnet
      - name: Set up .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'  # Ensure .NET 6 SDK is installed

      # Step 3: Create global.json to lock the .NET SDK version and disable roll-forward
      - name: Create global.json to specify .NET 6 version
        run: |
          if (-not (Test-Path 'global.json')) {
            Write-Host "Creating global.json to specify .NET 6 SDK"
            echo '{
              "sdk": {
                "version": "6.0.428",
                "rollForward": "disable"
              }
            }' > global.json
          }

      # Step 4: Print the installed .NET SDK version to verify it's using .NET 6
      - name: Print .NET SDK version
        run: |
          dotnet --version  # Should show 6.x version

      - name: New Steps added for creating staging directory
        run: mkdir -p $GITHUB_WORKSPACE/staging
        

      # Step 5: Restore dependencies using the solution file (.sln)
      # Use the solution file instead of the .csproj file for restore
      - name: Restore dependencies
        run: |
          #dotnet restore MyDotnetApp.sln /p:publishWebProjects=true /p:projects=**/*.csproj /p:custom="" /p:arguments="" /p:publishTestResults=true /p:testRunTitle=true /p:zipAfterPublish=true /p:modifyOutputPath=true /p:selectOrConfig=config /p:feedRestore="" /p:includeNuGetOrg=true /p:nugetConfigPath=test /p:externalEndpoints="" /p:noCache=false /p:packagesDirectory="" /p:verbosityRestore=Diagnostic /p:searchPatternPush=$GITHUB_WORKSPACE/staging/*.nupkg /p:nuGetFeedType=internal /p:feedPublish="" /p:publishPackageMetadata=true /p:externalEndpoint="" /p:searchPatternPack=**/*.csproj /p:configurationToPack=${{ env.Configuration }} /p:outputDir=$GITHUB_WORKSPACE/staging/ /p:nobuild=false /p:includesymbols=false /p:includesource=false /p:versioningScheme=off /p:versionEnvVar="" /p:requestedMajorVersion=1 /p:requestedMinorVersion=0 /p:requestedPatchVersion=0 /p:buildProperties="" /p:verbosityPack=Detailed /p:workingDirectory=""
          echo "Publish Web Projects: ${{ inputs.publishWebProjects }}"
          echo "projects: ${{ inputs.projects }}"
          echo "custom: ${{ inputs.custom }}"
          echo "arguments: ${{ inputs.arguments }}"
          echo "publishTestResults: ${{ inputs.publishTestResults }}"
          echo "testRunTitle: ${{ inputs.testRunTitle }}"
          echo "zipAfterPublish: ${{ inputs.zipAfterPublish }}"
          echo "modifyOutputPath: ${{ inputs.modifyOutputPath }}"
          echo "selectOrConfig: ${{ inputs.selectOrConfig }}"
          echo "feedRestore: ${{ inputs.feedRestore }}"
          echo "includeNuGetOrg: ${{ inputs.includeNuGetOrg }}"
          echo "nugetConfigPath: ${{ inputs.nugetConfigPath }}"
          echo "externalEndpoints: ${{ inputs.externalEndpoints }}"
          echo "noCache: ${{ inputs.noCache }}"
          echo "packagesDirectory: ${{ inputs.packagesDirectory }}"
          echo "verbosityRestore: ${{ inputs.verbosityRestore }}"
          echo "searchPatternPush: ${{ inputs.searchPatternPush }}"
          echo "nuGetFeedType: ${{ inputs.nuGetFeedType }}"
          echo "feedPublish: ${{ inputs.feedPublish }}"
          echo "publishPackageMetadata: ${{ inputs.publishPackageMetadata }}"
          echo "externalEndpoint: ${{ inputs.externalEndpoint }}"
          echo "searchPatternPack: ${{ inputs.searchPatternPack }}"
          echo "configurationToPack: ${{ inputs.configurationToPack }}"
          echo "outputDir: ${{ inputs.outputDir }}"
          echo "nobuild: ${{ inputs.nobuild }}"
          echo "includesymbols: ${{ inputs.includesymbols }}"
          echo "includesource: ${{ inputs.includesource }}"
          echo "versioningScheme: ${{ inputs.versioningScheme }}"
          echo "versionEnvVar: ${{ inputs.versionEnvVar }}"
          echo "requestedMajorVersion: ${{ inputs.requestedMajorVersion }}"
          echo "requestedMinorVersion: ${{ inputs.requestedMinorVersion }}"
          echo "requestedPatchVersion: ${{ inputs.requestedPatchVersion }}"
          echo "buildProperties: ${{ inputs.buildProperties }}"
          echo "verbosityPack: ${{ inputs.verbosityPack }}"
          echo "workingDirectory: ${{ inputs.workingDirectory }}"

          if (${{ inputs.task }} -eq "dotnet restore") {
            dotnet restore MyDotnetApp.sln ${{ inputs.publishWebProjects }} ${{ inputs.projects }} ${{ inputs.arguments }} ${{ inputs.publishTestResults }} ${{ inputs.testRunTitle }} ${{ inputs.zipAfterPublish }} ${{ inputs.modifyOutputPath }} ${{ inputs.selectOrConfig }} ${{ inputs.feedRestore }} ${{ inputs.includeNuGetOrg }} ${{ inputs.nugetConfigPath }} ${{ inputs.externalEndpoints }} ${{ inputs.noCache }} ${{ inputs.packagesDirectory }} ${{ inputs.verbosityRestore }} ${{ inputs.searchPatternPush }} ${{ inputs.nuGetFeedType }} ${{ inputs.feedPublish }} ${{ inputs.publishPackageMetadata }} ${{ inputs.externalEndpoint }} ${{ inputs.searchPatternPack }} ${{ inputs.configurationToPack }} ${{ inputs.outputDir }} ${{ inputs.nobuild }} ${{ inputs.includesymbols }} ${{ inputs.includesource }} ${{ inputs.versioningScheme }} ${{ inputs.versionEnvVar }} ${{ inputs.requestedMajorVersion }} ${{ inputs.requestedMinorVersion }} ${{ inputs.requestedPatchVersion }} ${{ inputs.buildProperties }} ${{ inputs.verbosityPack }} ${{ inputs.workingDirectory }}
            }
          elseif (${{ inputs.task }} -eq "dotnet build") {
            dotnet build MyDotnetApp.sln /p:publishWebProjects=true /p:projects='**/*.csproj' /p:custom="" /p:arguments="" /p:publishTestResults=true /p:testRunTitle=true /p:zipAfterPublish=true /p:modifyOutputPath=true /p:selectOrConfig=config /p:feedRestore="" /p:includeNuGetOrg=true /p:nugetConfigPath=test /p:externalEndpoints="" /p:noCache=false /p:packagesDirectory="" /p:verbosityRestore=Diagnostic /p:searchPatternPush=$GITHUB_WORKSPACE/staging/*.nupkg /p:nuGetFeedType=internal /p:feedPublish="" /p:publishPackageMetadata=true /p:externalEndpoint="" /p:searchPatternPack='**/*.csproj' /p:configurationToPack=${{ env.Configuration }} /p:outputDir=$GITHUB_WORKSPACE/staging/ /p:nobuild=false /p:includesymbols=false /p:includesource=false /p:versioningScheme=off /p:versionEnvVar="" /p:requestedMajorVersion=1 /p:requestedMinorVersion=0 /p:requestedPatchVersion=0 /p:buildProperties="" /p:verbosityPack=Detailed /p:workingDirectory="" --configuration Release
            }
          elseif (${{ inputs.task }} -eq "dotnet publish") {
            dotnet publish MyDotnetApp.sln /p:publishWebProjects=true /p:projects="" /p:custom="" /p:arguments="" /p:publishTestResults=true /p:testRunTitle="" /p:zipAfterPublish=false /p:modifyOutputPath=false /p:selectOrConfig=select /p:feedRestore="" /p:includeNuGetOrg=true /p:nugetConfigPath="" /p:externalEndpoints="" /p:noCache=false /p:packagesDirectory="" /p:verbosityRestore=Detailed /p:searchPatternPush="" /p:nuGetFeedType=internal /p:feedPublish="" /p:publishPackageMetadata=true /p:externalEndpoint="" /p:searchPatternPack="" /p:configurationToPack="" /p:outputDir="" /p:nobuild=false /p:includesymbols=false /p:includesource=false /p:versioningScheme=off /p:versionEnvVar"" /p:requestedMajorVersion="" /p:requestedMinorVersion=0 /p:requestedPatchVersion=0 /p:buildProperties="" /p:verbosityPack=Detailed /p:workingDirectory=""
            }
     # Step 6: Build the application using the solution file (.sln)
     #- name: Build application
    #    run: dotnet build MyDotnetApp.sln /p:publishWebProjects=true /p:projects=**/*.csproj /p:custom="" /p:arguments="" /p:publishTestResults=true /p:testRunTitle=true /p:zipAfterPublish=true /p:modifyOutputPath=true /p:selectOrConfig=config /p:feedRestore="" /p:includeNuGetOrg=true /p:nugetConfigPath=test /p:externalEndpoints="" /p:noCache=false /p:packagesDirectory="" /p:verbosityRestore=Diagnostic /p:searchPatternPush=$GITHUB_WORKSPACE/staging/*.nupkg /p:nuGetFeedType=internal /p:feedPublish="" /p:publishPackageMetadata=true /p:externalEndpoint="" /p:searchPatternPack=**/*.csproj /p:configurationToPack=${{ env.Configuration }} /p:outputDir=$GITHUB_WORKSPACE/staging/ /p:nobuild=false /p:includesymbols=false /p:includesource=false /p:versioningScheme=off /p:versionEnvVar="" /p:requestedMajorVersion=1 /p:requestedMinorVersion=0 /p:requestedPatchVersion=0 /p:buildProperties="" /p:verbosityPack=Detailed /p:workingDirectory="" --configuration Release

        # Step 7: Publish the application (this step prepares the app for deployment)
     # - name: Publish application
     #   run: |
      #    dotnet publish MyDotnetApp.sln /p:publishWebProjects=true /p:projects="" /p:custom="" /p:arguments="" /p:publishTestResults=true /p:testRunTitle="" /p:zipAfterPublish=false /p:modifyOutputPath=false /p:selectOrConfig=select /p:feedRestore="" /p:includeNuGetOrg=true /p:nugetConfigPath="" /p:externalEndpoints="" /p:noCache=false /p:packagesDirectory="" /p:verbosityRestore=Detailed /p:searchPatternPush="" /p:nuGetFeedType=internal /p:feedPublish="" /p:publishPackageMetadata=true /p:externalEndpoint="" /p:searchPatternPack="" /p:configurationToPack="" /p:outputDir="" /p:nobuild=false /p:includesymbols=false /p:includesource=false /p:versioningScheme=off /p:versionEnvVar"" /p:requestedMajorVersion="" /p:requestedMinorVersion=0 /p:requestedPatchVersion=0 /p:buildProperties="" /p:verbosityPack=Detailed /p:workingDirectory=""

      # Step 8: Run the application using the solution file (.sln)
      - name: Run application
        run: |
          dotnet run --project MyDotnetApp.csproj --configuration Release
